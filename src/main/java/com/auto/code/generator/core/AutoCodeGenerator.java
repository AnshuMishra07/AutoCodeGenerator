package com.auto.code.generator.core;

import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;

import com.auto.code.generator.specification.APIType;
import com.auto.code.generator.specification.BusinessClassSpecification;
import com.auto.code.generator.specification.GeneralSpecification;
import com.auto.code.generator.specification.Utility;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.sun.codemodel.JCodeModel;

/**
 * @author Anshu Mishra
 *
 */
public class AutoCodeGenerator {
	private final static String SPEC_FILE_NAME = "specificationFile";

	public static void main(String[] args) throws Exception {
		String specificationFile = System.getProperty(SPEC_FILE_NAME);
		if (specificationFile == null) {
			specificationFile = args[0];
		}
		ObjectMapper mapper = new ObjectMapper();
		// JSON file to Java object
		GeneralSpecification gSpec = mapper.readValue(new File(specificationFile), GeneralSpecification.class);
		if (gSpec == null) {
			throw new Exception("Blank specification file......");
		}
		String autoGenerateFilePath = gSpec.getAutoGeneratedFilePath();
		try {
			if (gSpec != null && gSpec.getApiSpecification() != null) {
				// creating target dir.
				Path path = Paths.get(autoGenerateFilePath + "/target/classes");
				if (!Files.exists(path)) {
					try {
						Files.createDirectories(path);
					} catch (IOException e) {
						System.err.println("Error creating target directory...");
						e.printStackTrace();
					}
				}

				JCodeModel codeModel = new JCodeModel();
				RequestGenerator requestGenerator = new RequestGenerator();
				ResponseGenerator responseGenerator = new ResponseGenerator();
				if ((gSpec.getApiSpecification().getApiMethodType().equalsIgnoreCase(APIType.POST.name())
						|| gSpec.getApiSpecification().getApiMethodType().equalsIgnoreCase(APIType.PUT.name()))) {
					requestGenerator.generateRequest(codeModel, gSpec.getApiSpecification(), gSpec.getBasePackageName(),
							autoGenerateFilePath);
				}
				responseGenerator.generateResponse(codeModel, gSpec.getApiSpecification(), gSpec.getBasePackageName(),
						autoGenerateFilePath);
			}

		} catch (Exception e) {
			System.err.println("Error occured during request and response model generation...");
			e.printStackTrace();
		}
		try {

			if (gSpec != null && gSpec.getApiSpecification() != null) {
				JCodeModel codeModel = new JCodeModel();
				// Setting Class names
				setClassSpecification(gSpec);
				ControllerClassGenerator.generateController(codeModel, gSpec.getApiSpecification(),
						gSpec.getBasePackageName(), gSpec.getRootPath(), autoGenerateFilePath);
			}

		} catch (Exception e) {
			System.err.println("Error occured during business class model generation...");
			e.printStackTrace();
		}
	}

	private static void setClassSpecification(GeneralSpecification gSpec) {
		// Controller class
		BusinessClassSpecification controller = new BusinessClassSpecification();
		controller.setClassName(gSpec.getApiSpecification().getApiName() + "Controller");
		controller.setMethodName(Utility.constructVariable(gSpec.getApiSpecification().getApiName()));
		gSpec.getApiSpecification().setController(controller);
		// Service class
		BusinessClassSpecification service = new BusinessClassSpecification();
		service.setClassName(gSpec.getApiSpecification().getApiName() + "Service");
		service.setMethodName(Utility.constructVariable(gSpec.getApiSpecification().getApiName()));
		gSpec.getApiSpecification().setService(service);
		// Dao
		BusinessClassSpecification dao = new BusinessClassSpecification();
		dao.setClassName(gSpec.getApiSpecification().getApiName() + "Dao");
		dao.setMethodName(Utility.constructVariable(gSpec.getApiSpecification().getApiName()));
		gSpec.getApiSpecification().setDao(dao);
	}

}
